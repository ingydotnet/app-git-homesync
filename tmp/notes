- Features
    - Have a wrapper for "git add" that deals with .gitignore (see "Misc
      ideas")
    - Misc ideas:
        $ git-home-sync create-repo
        # Prompt for path (ie. /home/tstanton/var/git/)
        # Create home.git via $ git init --bare

        $ pwd
        /home/tstanton

        $ git-home-sync init
        # (Do create-repo for bare repo)
        # Start with empty commit in working tree
        # git remote add origin ../repository_remote-bare
        # Add this bit...
            [branch "master"]
                    remote = origin
                    merge = refs/heads/master
        # Add templated .gitignore (in __DATA__)
        # $ git push

        $ git-home-sync add .bashrc
        # >>.gitignore
        # git add -v .bashrc

        $ git-home-sync init --repo-path=/home/tstanton/var/git/home.git

        $ git-home-sync init --repo-path=tstanton@tommystanton.com:/home/tstanton/var/git/home.git
        # git init (if ./.git/ doesn't already exist)
        # git config --replace-all user.name 'tstanton@tmini'
        # git remote add origin 'tstanton@192.168.1.102:/home/tstanton/var/git/home.git'
        (if origin branch doesn't already exist)
        # git fetch origin (will prompt for SSH password)
        # git branch master origin/master
        # git checkout master .
    - Have a wrapper for "git pull" (or perhaps involving "git fetch"
      and "git merge", which will automatically moves ("backs up") an
      untracked file in the user's home directory that is going to
      conflict with a new file being pulled in.  The goal is to avoid
      this sort of problem, which prevents a successful pull:
        [tstanton@tbox ~]$ git pull
        remote: Generating pack...
        remote: Done counting 17 objects.
        Result has 12 objects.
        remote: Deltifying 12 objects...
        100% (12/12)remote:  done
        Unpacking 12 objects...
        remote: Total 12 (delta 5), reused 0 (delta 0)
        100% (12/12) done
        * refs/remotes/public/master: fast forward to branch 'master' of
        /var/www/git/home
        old..new: 44de06e..ce178f4
        Updating 44de06e..ce178f4
        fatal: Untracked working tree file '.vroom/vimrc' would be
        overwritten by merge.
        [tstanton@tbox ~]$ mv -iv ./.vroom ./.vroom.bak$(today)
        `./.vroom' -> `./.vroom.bak20100826'
        [tstanton@tbox ~]$ git pull
        Updating 44de06e..ce178f4
        Fast forward
        .gitignore          |    3 +++
        .mplayer/input.conf |    4 ++--
        .vimrc              |    2 ++
        .vroom/vimrc        |   14 ++++++++++++++
        4 files changed, 21 insertions(+), 2 deletions(-)
        create mode 100644 .vroom/vimrc

- CPAN-related
    - Should the dist name be App::Git::Homesync, or git-home-sync?
    - Consider using Git::Repository or Git::Wrapper (or maybe
      VCS::Which?) to interact with git
    - Consider utilizing CPAN modules like:
        - App::Info - determine if git is on the system and what version
            - Have a SKIP in the test suite if git is not on the system
        - PAR (Perl Archive Toolkit) to bundle up the program for quick
          deployment
            - http://search.cpan.org/dist/PAR-Dist/

- Los Angeles Perl Mongers on 9/22/10
    - Separate "root commit" for current files
        - Merge in remote files
            - Conflicts may occur...

    - IPC::Simple
        - capture output Test::MockModule
            - steal a method name (override IPC::Run or IPC::Simple)

    - .git/info/exclude
        - overriding .gitignore
        - ignore everything, user can git add manually

    - Optimization
        - autouse.pm (?)
        - Devel::NYTProf
            - Git::PurePerl seems to be a huge performance hit

    - MooseX::Getopt::Dashes
    - MooseX::SimpleConfig
        - HttpGrep
            - github.com/jbarratt
    - MooseX::LazyLogDispatch
    - App::Cmd::Plugin::Prompt

    - Jekyll blog

    - Config management
        - Spine
        - Chef
        - Puppet
        - CFEngine
        - CRuby
