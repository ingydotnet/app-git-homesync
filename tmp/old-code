# The layout of this file is based on Don Armstrong's Perl script
# template, available at:
#   http://svn.donarmstrong.com/don/trunk/lib/templates/perl_script

# This script is released under the terms of the GPL version 2, or any
# later version, at your option.
# Copyright 2010 by Tommy Stanton <tommystanton AT gmail.com>

# TODO Allow config file as a substitute for long options

# TODO Use CPAN modules?:
# autodie
# App::Fatpacker

use warnings;
use strict;

our $VERSION = '0.01';

# Use standard modules
use Getopt::Long;
use Pod::Usage;
use Sys::Hostname;
use Cwd;
use File::Copy;

=head1 NAME

git-home-sync - start syncing your ~

=head1 SYNOPSIS

git-home-sync [OPTIONS] ACTION

 OPTIONS:
  --other-user      The user on the other box
  --other-host      Other box's address
  --other-hostname  Other box's hostname
  --dry-run         Only print the commands
  --debug, -d       Debugging level (Default 0)
  --help, -h        Display this help
  --man, -m         Display manual

  ACTION:
   init             Do a 'git init', then ACTIONs:
                    config, remote-add, make-master
   config           Update user.name to CURRENT_USER@CURRENT_HOSTNAME
   remote-add       Add a remote entry for the other box
   make-master      Create a 'master' branch for a newly-init'd ~
   remote-fix       Do ACTION "remote-add", delete 'origin/master'

=head1 OPTIONS

=over

=item B<--other-user>

The user of the other box that you want to sync with

=item B<--other-host>

The address of the other box that you want to sync with

=item B<--other-hostname>

The hostname of the other box that you want to sync with

=item B<--debug, -d>

Turn on debugging

=item B<--dry-run>

Don't actually run any commands; just print out what would be done

=item B<--help, -h>

Displays brief usage information

=item B<--man, -m>

Displays the manual

=back

=head1 ACTION

=over

=item B<init>

Do a 'git init', then ACTIONs: config, remote-add, make-master

Use this action for a home directory that needs to be synced to another
home directory that is already under git's version control.

=item B<config>

Update user.name to CURRENT_USER@CURRENT_HOSTNAME

Use this action to simply update your git config settings to represent
your current user.  This is handy in the context of commit logs: you
will be able to tell which user and which box a change came from.

=item B<remote-add>

Add a remote entry for the other box

=item B<make-master>

Create a 'master' branch for a newly-init'd ~

This makes the repository in ~ sound by getting a 'master' branch going,
based on the remote branch.  Conflicting files are interactively moved
aside beforehand.

=item B<remote-fix>

Do ACTION "remote-add", delete 'origin/master'

Basically, renames 'origin/master' to 'OTHER_HOSTNAME/master'.

This action is useful for directories under the home directory that are
their own repositories, cloned from another box.

For example, if you have a repository, ~/bin, on the other box, and you
want to clone it to your current box:

    $ cd ~
    $ git clone OTHER_USER@OTHER_HOST:/home/OTHER_USER/bin
    $ git branch -a
    * master
    remotes/origin/HEAD -> origin/master
    remotes/origin/master
    $ git-home-sync [OPTIONS] remote-fix
    $ git branch -a
    * master
    remotes/OTHER_HOSTNAME/master

=back

=head1 EXAMPLES

    $ whoami
    travis
    $ hostname
    tbox
    $ pwd
    /home/travis
    $ git-home-sync -d \
    --other-user=lynn --other-host=192.168.1.102 \
    --other-hostname=lbox init

=cut

our ( $DEBUG, $DRY_RUN );

my %options = (
    'debug'   => 0,
    'dry-run' => 0,
    'help'    => 0,
    'man'     => 0,
);

GetOptions( \%options, 
    'debug|d+',
    'dry-run',
    'help|h|?',
    'man|m',
    'other-user=s',
    'other-host=s',
    'other-hostname=s',
);

pod2usage() if $options{help};
pod2usage( { verbose => 2 } ) if $options{man};

$DEBUG   = $options{debug};
$DRY_RUN = $options{'dry-run'};

my $NUM_OF_REQUIRED_ARGS = 1;
my @USAGE_ERRORS;
if (@ARGV < $NUM_OF_REQUIRED_ARGS) {
     push @USAGE_ERRORS, 'You must specify an ACTION';
}

my @ACTIONS = (
    'init', 'config', 'remote-add', 'remote-fix', 'make-master' );
$options{action} = shift;
unless ( grep { $options{action} eq $_ } @ACTIONS ) {
    push @USAGE_ERRORS, "No such action '$options{action}'";
}
unless ( defined $options{'other-user'}
    && defined $options{'other-host'}
    && defined $options{'other-hostname'} )
{
    push @USAGE_ERRORS, 'A required option is missing';
}
unless (qx{which git}) {
    push @USAGE_ERRORS,
        'Git is not available on your system (it is not in your $PATH).'
}

pod2usage( join( "\n", @USAGE_ERRORS ) ) if @USAGE_ERRORS;

my $USER = $ENV{USER};
my $HOSTNAME = hostname;

my $other_user = $options{'other-user'};
my $other_hostname = $options{'other-hostname'};
my $other_host = $options{'other-host'};
my $other_repos_path = getcwd;
# Make sure that the home directory paths match up
$other_repos_path =~ s!^(/(?:home|Users)/)$USER!$1$other_user!;
my $remote = $other_hostname;
my $remote_branch = sprintf '%s/master', $remote;

my $git_init_cmd = q{git init};
my $git_config_cmd =
    sprintf q{git config --replace-all user.name '%s@%s'}, $USER, $HOSTNAME;
my $git_remote_add_cmd =
    sprintf qq{git remote add $other_hostname '%s@%s:%s'}, $other_user, $other_host, $other_repos_path;
my $git_fetch_cmd = qq{git fetch $remote};
my $git_branch_master_cmd =
    qq{git branch master $remote_branch};
my $git_checkout_master_cmd =
    q{git checkout master .}; # Update the current path (".")
my $git_branch_delete_origin_cmd = q{git branch -r -d origin/master};
my $git_config_branch_remove_cmd =
    q{git config --remove-section remote.origin};
my $remove_origin_branch_files_cmd =
    q{rm -R .git/refs/remotes/origin/};

my %cmds = (
    git_init          => sub { &run_cmd($git_init_cmd); },
    git_config        => sub { &run_cmd($git_config_cmd); },
    git_remote_add    => sub { &run_cmd($git_remote_add_cmd); },
    git_fetch         => sub { &run_cmd($git_fetch_cmd); },
    git_branch_master => sub {
        print STDERR qq{# Creating a 'master' branch, based off of }
                   . qq{the remote branch...\n};
        &run_cmd($git_branch_master_cmd);
    },
    git_checkout_master => sub {
        &run_cmd($git_checkout_master_cmd);
    },
    git_branch_delete_origin => sub {
        print STDERR qq{# Deleting the 'origin/master' remote branch...\n};
        &run_cmd($git_branch_delete_origin_cmd);
    },
    git_config_branch_remove => sub {
        &run_cmd($git_config_branch_remove_cmd);
    },
    remove_origin_branch_files => sub {
        &run_cmd($remove_origin_branch_files_cmd);
    },
    move_aside_conflicting_files => sub {
        my $git_ls_tree_cmd =
            qq{git ls-tree --name-only $remote_branch 2> /dev/null};
        #print STDERR "\$ $git_ls_tree_cmd\n" if $DRY_RUN || $DEBUG;
        my @awaiting_remote_files =
            qx{$git_ls_tree_cmd};
        # Only proceed if we're actually in a git repository
        if (@awaiting_remote_files) {
            print STDERR qq{# Moving aside conflicting files...\n};
            foreach my $file (@awaiting_remote_files) {
                chomp $file; # Remove the newline from the command
                if ( -f $file || -d $file ) {
                    # (Avoid using the DateTime module)
                    my $date = qx{date +%Y%m%d};
                    chomp $date; # Remove the newline from the command
                    my ( $old_filename, $new_filename ) =
                        ( $file, ( sprintf '%s.bak%s', $file, $date ) );
                    move( $old_filename, $new_filename )
                        unless $DRY_RUN;
                    print STDERR qq{# "$old_filename" --> "$new_filename"\n}
                        if $DRY_RUN || $DEBUG;
                }
            }
        }
    },
);

# TODO Check that the previous command in the sequence is succesful
# before proceeding (using autodie)
# TODO Verify return status of $ git fsck after running the
# "remove_origin_branch_files" command
if ( $options{action} eq 'init' ) {
    $cmds{$_}->()
        for qw( git_init
                git_config
                git_remote_add
                git_fetch
                git_branch_master
                move_aside_conflicting_files
                git_checkout_master );
}
elsif ( $options{action} eq 'config' ) {
    $cmds{$_}->()
        for qw( git_config );
}
elsif ( $options{action} eq 'remote-add' ) {
    $cmds{$_}->()
        for qw( git_remote_add
                git_fetch );
}
elsif ( $options{action} eq 'make-master' ) {
    $cmds{$_}->()
        for qw( git_branch_master
                move_aside_conflicting_files
                git_checkout_master );
}
# TODO Just let origin be
elsif ( $options{action} eq 'remote-fix' ) {
    $cmds{$_}->()
        for qw( git_remote_add
                git_fetch
                git_branch_delete_origin
                git_config_branch_remove
                remove_origin_branch_files );
}

sub run_cmd {
    my $cmd = shift;
    print STDERR "\$ $cmd\n" if $DRY_RUN || $DEBUG;
    system($cmd) unless $DRY_RUN;
}

=head1 CAVEAT

All required OPTIONs must be specified, regardless of the ACTION.

=head1 WARRANTY

THIS PROGRAM COMES WITHOUT WARRANTY OF ANY KIND.

=head1 AUTHOR

Tommy Stanton L<http://tommystanton.com>

=cut

